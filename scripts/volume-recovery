#!/bin/bash

set -e

if [[ $# -ne 6 ]]; then
  echo "Script needs 6 parameters, -s (snapshot id) -i (instance id) -v (volume id)"
  exit 1
fi

while [[ $# -gt 0 ]]; do
    key="${1}"
    case ${key} in
        -s|--snapshot)
            SNAPSHOT="${2}"
            shift
            ;;
        -i|--instance)
            INSTANCE_ID="${2}"
            shift
            ;;
        -v|--volume)
            OLD_VOLUME="${2}"
            shift
            ;;
        *)
            log-output error "Unexpected option: ${1}"
            usage
            exit 1
            ;;
    esac
    shift
done

mandatory=(
  SNAPSHOT
  INSTANCE_ID
  OLD_VOLUME
)
for variable in ${mandatory[@]}; do
  if [[ -z ${variable} ]]; then
    echo "Mandatory variable missing: [${BOLD}${variable}${NORMAL}]"
    exit 1
  fi
done

# Check old volume and instance exist together
INSTANCE_CHECK_JSON=$(aws ec2 describe-volumes --volume-ids $OLD_VOLUME)

# echo ${INSTANCE_CHECK_JSON}
SNAPSHOT_CHECK_JSON=$(aws ec2 describe-snapshots --snapshot-ids $SNAPSHOT | jq -r .Snapshots[].StartTime)

# echo "Snapshot creation date: ${SNAPSHOT_CHECK_JSON}"

# Bring back the instance name which is in the Name key tag
INSTANCE_NAME_JSON=$(aws ec2 describe-instances --instance-id $INSTANCE_ID | jq -r '.Reservations[].Instances[].Tags[] | select(.Key == "Name").Value')

# echo "Instance name is ${INSTANCE_NAME_JSON}"

VOLUME_INSTANCE_ID=$(echo ${INSTANCE_CHECK_JSON} | jq -r .Volumes[].Attachments[].InstanceId)
if [[ ${VOLUME_INSTANCE_ID} != ${INSTANCE_ID} ]]; then
  echo "Volume is not attached to this instance, it appears to be attached to ${VOLUME_INSTANCE_ID}"
  exit 1
fi

echo "Snapshot is $SNAPSHOT, which was created ${SNAPSHOT_CHECK_JSON%.*}"
echo "Instance is $INSTANCE_ID, the name is ${INSTANCE_NAME_JSON}"
echo "Old volume is $OLD_VOLUME"

read -p "Do you want to proceed? y or n " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    exit 1
fi

exit 1

OLD_VOLUME_JSON=$(aws ec2 describe-volume-status --volume-ids $OLD_VOLUME)
INSTANCE_JSON=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID --include-all-instances)
# echo ${OLD_VOLUME_JSON}
# echo ${INSTANCE_JSON}

# Create volume from snapshot and wait for an 'ok' status
VOLUME=$(aws ec2 create-volume --volume-type gp2 --snapshot-id $SNAPSHOT --availability-zone eu-west-2a)
echo "VOLUME: ${VOLUME}"
VOLUME_ID=$(echo ${VOLUME} | jq -r .VolumeId)
echo ${VOLUME_ID}
aws ec2 create-tags --resources ${VOLUME_ID} --tags Key=Snapshot,Value=daily
VOLUME_JSON=$(aws ec2 describe-volume-status --volume-ids ${VOLUME_ID})
# echo ${VOLUME_JSON}
VOLUME_STATUS=$(echo ${VOLUME_JSON} | jq -r .VolumeStatuses[].VolumeStatus.Status)
until [[ ${VOLUME_STATUS} == "ok" ]]; do
  sleep 5
  VOLUME_JSON=$(aws ec2 describe-volume-status --volume-ids ${VOLUME_ID})
  VOLUME_STATUS=$(echo ${VOLUME_JSON} | jq -r .VolumeStatuses[].VolumeStatus.Status)
  echo ${VOLUME_STATUS}
done

# Stop the EC2 instance and wait for a 'stopped' status
INSTANCE=$(aws ec2 stop-instances --instance-ids $INSTANCE_ID)
echo "INSTANCE: ${INSTANCE}"
# echo ${INSTANCE_JSON}
INSTANCE_STATE=$(echo ${INSTANCE_JSON} | jq -r .InstanceStatuses[].InstanceState.Name)
until [[ ${INSTANCE_STATE} == "stopped" ]]; do
  sleep 5
  INSTANCE_JSON=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID --include-all-instances )
  INSTANCE_STATE=$(echo ${INSTANCE_JSON} | jq -r .InstanceStatuses[].InstanceState.Name)
  echo ${INSTANCE_STATE}
done

# Detach the old volume from the EC2 instance and wait for an 'available' status
echo "Detaching volume from ${INSTANCE_NAME_JSON}"
DETACH=$(aws ec2 detach-volume --volume-id $OLD_VOLUME)
echo "DETACH: ${DETACH}"
DETACH_JSON=$(aws ec2 describe-volumes --volume-ids $OLD_VOLUME)
# echo ${DETACH_JSON}
DETACH_STATE=$(echo ${DETACH_JSON} | jq -r .Volumes[].State)
until [[ ${DETACH_STATE} == "available" ]]; do
  sleep 5
  DETACH_JSON=$(aws ec2 describe-volumes --volume-ids $OLD_VOLUME)
  DETACH_STATE=$(echo ${DETACH_JSON} | jq -r .Volumes[].State)
  echo ${DETACH_STATE}
done

# Attach the newly created volume to the EC2 instance and wait for an 'attached' status
ATTACH=$(aws ec2 attach-volume --volume-id ${VOLUME_ID} --instance-id $INSTANCE_ID --device /dev/xvdb)
echo "ATTACH: ${ATTACH}"
ATTACH_JSON=$(aws ec2 describe-volumes --volume-ids ${VOLUME_ID} )
# echo ${ATTACH_JSON}
ATTACH_STATE=$(echo ${ATTACH_JSON} | jq -r .Volumes[].Attachments[].State)
until [[ ${ATTACH_STATE} == "attached" ]]; do
  sleep 5
  ATTACH_JSON=$(aws ec2 describe-volumes --volume-ids ${VOLUME_ID} )
  ATTACH_STATE=$(echo ${ATTACH_JSON} | jq -r .Volumes[].Attachments[].State)
  echo ${ATTACH_STATE}
done

# Start up the EC2 instance and wait for a 'running' status
INSTANCE_START=$(aws ec2 start-instances --instance-ids $INSTANCE_ID)
echo "INSTANCE_START: ${INSTANCE_START}"
INSTANCE_START_JSON=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID --include-all-instances )
# echo ${INSTANCE_START_JSON}
INSTANCE_START_STATE=$(echo ${INSTANCE_START_JSON} | jq -r .InstanceStatuses[].InstanceState.Name)
until [[ ${INSTANCE_START_STATE} == "running" ]]; do
  sleep 5
  INSTANCE_START_JSON=$(aws ec2 describe-instance-status --instance-id $INSTANCE_ID --include-all-instances )
  INSTANCE_START_STATE=$(echo ${INSTANCE_START_JSON} | jq -r .InstanceStatuses[].InstanceState.Name)
  echo ${INSTANCE_START_STATE}
done
